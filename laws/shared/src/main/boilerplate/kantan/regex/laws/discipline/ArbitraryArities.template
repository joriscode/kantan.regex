/*
 * Copyright 2016 Nicolas Rinaudo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kantan.regex.laws.discipline

import java.util.regex.Pattern
import kantan.codecs.laws.{LegalString, IllegalString, CodecValue}
import kantan.regex.{codecs, Match}
import kantan.regex.laws.{LegalMatch, IllegalMatch}
import org.scalacheck.Arbitrary

trait ArbitraryArities extends kantan.codecs.laws.discipline.ArbitraryInstances {
  def toMatch(p: Pattern, is: String*): Match = {
    val matcher = p.matcher(is.mkString(" "))
    matcher.find()
    new Match(matcher)
  }

  [#val pattern1 = Pattern.compile("[#([^ ]*)# ]")

  def arbLegalCaseClass1[[#I1#], O](f: ([#I1#]) => O)(implicit [#al1: Arbitrary[LegalString[I1]]#]): Arbitrary[LegalMatch[O]] = {
    [#implicit val arb1: Arbitrary[CodecValue.LegalValue[String, I1, codecs.type]] = Arbitrary(al1.arbitrary.map(_.tag[codecs.type]))#
    ]
    Arbitrary(genLegalWith1(f)(([#i1: String#]) => toMatch(pattern1, [#i1#])))
  }

  def arbIllegalCaseClass1[[#I1#], O](implicit [#ai1: Arbitrary[IllegalString[I1]]#]): Arbitrary[IllegalMatch[O]] = {
    [#implicit val arb1: Arbitrary[CodecValue.IllegalValue[String, I1, codecs.type]] = Arbitrary(ai1.arbitrary.map(_.tag[codecs.type]))#
    ]
    Arbitrary(genIllegalWith1[[#String#], [#I1#], Match, O, codecs.type](([#i1: String#]) => toMatch(pattern1, [#i1#])))
  }

  implicit def arbLegalTuple1[[#I1#]](implicit [#al1: Arbitrary[LegalString[I1]]#]): Arbitrary[LegalMatch[Tuple1[[#I1#]]]] =
    arbLegalCaseClass1(Tuple1.apply[[#I1#]])

  implicit def arbIllegalTuple1[[#I1#]](implicit [#ai1: Arbitrary[IllegalString[I1]]#]): Arbitrary[IllegalMatch[Tuple1[[#I1#]]]] =
    arbIllegalCaseClass1[[#I1#], Tuple1[[#I1#]]]#

  ]
}
