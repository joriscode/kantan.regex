/*
 * Copyright 2016 Nicolas Rinaudo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kantan.regex

import laws._
import laws.discipline._, arbitrary._
import org.scalacheck.{Arbitrary, Cogen}

object Class1 {
  implicit val arb: Arbitrary[Class1]         = Arbitrary(Arbitrary.arbitrary[Int].map((Class1.apply _)))
  implicit val cogen: Cogen[Class1]           = Cogen.cogenList[Int].contramap(f ⇒ List(f.f1))
  implicit val decoder1: MatchDecoder[Class1] = MatchDecoder.ordered(Class1.apply _)
}
final case class Class1(f1: Int)

[2..#object Class1 {
  implicit val arb: Arbitrary[Class1]         = Arbitrary(Arbitrary.arbitrary[Tuple1[[#Int#]]].map((Class1.apply _).tupled))
  implicit val cogen: Cogen[Class1]           = Cogen.cogenList[Int].contramap(f ⇒ List([#f.f1#]))
  implicit val decoder1: MatchDecoder[Class1] = MatchDecoder.ordered(Class1.apply _)
}
final case class Class1([#f1: Int#])#

]


class CaseClassDecoderTests extends DisciplineSuite {

  [#implicit val arbLegalClass1: Arbitrary[LegalMatch[Class1]] = kantan.regex.laws.discipline.arbitrary.arbLegalCaseClass1(Class1.apply)
  implicit val arbIllegalClass1: Arbitrary[IllegalMatch[Class1]] = kantan.regex.laws.discipline.arbitrary.arbIllegalCaseClass1[[#Int#], Class1]#

  ]

  [#checkAll("MatchDecoder[Class1]", MatchDecoderTests[Class1].decoder[Int, Int])
  checkAll("MatchDecoder[Class1]", SerializableTests[MatchDecoder[Class1]].serializable)#

  ]
}
